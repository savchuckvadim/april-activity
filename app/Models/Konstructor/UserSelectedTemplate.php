<?php

namespace App\Models\Konstructor;

use App\Models\Konstructor\OfferTemplate;
use App\Models\Portal;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
class UserSelectedTemplate extends Model
{
    use HasFactory;

    protected $table = 'user_selected_templates';

    protected $fillable = [
        'bitrix_user_id',
        'portal_id',
        'offer_template_id',
        'is_current',
        'is_favorite',
        'is_active',
        'price_settings',
        'infoblock_settings',
        'letter_text',
        'sale_text_1',
        'sale_text_2',
        'sale_text_3',
        'sale_text_4',
        'sale_text_5',
    ];

    /**
     * üîπ –°–≤—è–∑—å —Å `OfferTemplate`
     */
    public function template()
    {
        return $this->belongsTo(OfferTemplate::class, 'offer_template_id');
    }

    /**
     * üîπ –°–≤—è–∑—å —Å `Portal`
     */
    public function portal()
    {
        return $this->belongsTo(Portal::class, 'portal_id');
    }

    /**
     * üîπ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public static function getCurrentTemplate(int $bitrixUserId, int $portalId)
    {
        // 1. –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (`is_current = true`)
        $currentTemplate = self::where('bitrix_user_id', $bitrixUserId)
            ->where('portal_id', $portalId)
            ->where('is_current', true)
            ->with('template')
            ->first();

        if ($currentTemplate) {
            return $currentTemplate->template;
        }

        // 2. –ù–∞–π—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (`is_default = true` –≤ user_selected_templates)
        $defaultUserTemplate = self::where('bitrix_user_id', $bitrixUserId)
            ->where('portal_id', $portalId)
            ->whereHas('template', fn($query) => $query->where('is_default', true))
            ->with('template')
            ->first();

        if ($defaultUserTemplate) {
            return $defaultUserTemplate->template;
        }

        // 3. –ù–∞–π—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ—Ä—Ç–∞–ª–∞ (`is_default = true` –≤ offer_template_portal)
        $defaultPortalTemplate = OfferTemplate::whereHas('portals', function ($query) use ($portalId) {
                $query->where('portal_id', $portalId)->where('is_default', true);
            })
            ->first();

        if ($defaultPortalTemplate) {
            return $defaultPortalTemplate;
        }

        // 4. –í–µ—Ä–Ω—É—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (`is_default = true` –≤ offer_templates)
        return OfferTemplate::getGlobalDefault();
    }
}
